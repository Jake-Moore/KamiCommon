--- a/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -1,5 +1,7 @@
 package net.minecraft.world.level.chunk;
 
+import ca.spottedleaf.starlight.light.SWMRNibbleArray;
+import ca.spottedleaf.starlight.light.StarLightEngine;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -63,16 +65,96 @@
     private long inhabitedTime;
     private final Map<GenerationStep.Carving, BitSet> carvingMasks = new Object2ObjectArrayMap<>();
     private volatile boolean isLightCorrect;
+    // Paper start - Add level
+    final net.minecraft.world.level.Level level;
+    @Override
+    public net.minecraft.world.level.Level getLevel() {
+        return this.level;
+    }
+    // Paper end
+    private static boolean PRINTED_OUTDATED_CTOR_MSG = false; // Paper - Add level
+
+    // Paper start - rewrite light engine
+    protected volatile SWMRNibbleArray[] blockNibbles;
+    protected volatile SWMRNibbleArray[] skyNibbles;
+    protected volatile boolean[] skyEmptinessMap;
+    protected volatile boolean[] blockEmptinessMap;
+
+    @Override
+    public SWMRNibbleArray[] getBlockNibbles() {
+        return this.blockNibbles;
+    }
+
+    @Override
+    public void setBlockNibbles(SWMRNibbleArray[] nibbles) {
+        this.blockNibbles = nibbles;
+    }
+
+    @Override
+    public SWMRNibbleArray[] getSkyNibbles() {
+        return this.skyNibbles;
+    }
+
+    @Override
+    public void setSkyNibbles(SWMRNibbleArray[] nibbles) {
+        this.skyNibbles = nibbles;
+    }
+
+    @Override
+    public boolean[] getSkyEmptinessMap() {
+        return this.skyEmptinessMap;
+    }
+
+    @Override
+    public void setSkyEmptinessMap(boolean[] emptinessMap) {
+        this.skyEmptinessMap = emptinessMap;
+    }
+
+    @Override
+    public boolean[] getBlockEmptinessMap() {
+        return this.blockEmptinessMap;
+    }
+
+    @Override
+    public void setBlockEmptinessMap(boolean[] emptinessMap) {
+        this.blockEmptinessMap = emptinessMap;
+    }
+    // Paper end - rewrite light engine
 
+    @Deprecated // Paper start - add level
     public ProtoChunk(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor world) {
+        // Paper start
+        this(pos, upgradeData, world, null);
+        if (!PRINTED_OUTDATED_CTOR_MSG) {
+            new IllegalArgumentException("Must use ProtoChunk constructor with the ServerLevel parameter").printStackTrace();
+            PRINTED_OUTDATED_CTOR_MSG = true;
+        }
+    }
+    public ProtoChunk(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor world, net.minecraft.server.level.ServerLevel level) {
+        // Paper end
         this(pos, upgradeData, (LevelChunkSection[])null, new ProtoTickList<>((block) -> {
             return block == null || block.defaultBlockState().isAir();
         }, pos, world), new ProtoTickList<>((fluid) -> {
             return fluid == null || fluid == Fluids.EMPTY;
-        }, pos, world), world);
+        }, pos, world), world, level); // Paper - add level
     }
 
+    @Deprecated // Paper start - add level
     public ProtoChunk(ChunkPos pos, UpgradeData upgradeData, @Nullable LevelChunkSection[] levelChunkSections, ProtoTickList<Block> blockTickScheduler, ProtoTickList<Fluid> fluidTickScheduler, LevelHeightAccessor world) {
+        // Paper start
+        this(pos, upgradeData, levelChunkSections, blockTickScheduler, fluidTickScheduler, world, null);
+        if (!PRINTED_OUTDATED_CTOR_MSG) {
+            new IllegalArgumentException("Must use ProtoChunk constructor with the ServerLevel parameter").printStackTrace();
+            PRINTED_OUTDATED_CTOR_MSG = true;
+        }
+    }
+    public ProtoChunk(ChunkPos pos, UpgradeData upgradeData, @Nullable LevelChunkSection[] levelChunkSections, ProtoTickList<Block> blockTickScheduler, ProtoTickList<Fluid> fluidTickScheduler, LevelHeightAccessor world, net.minecraft.server.level.ServerLevel level) {
+        // Paper start
+        this.blockNibbles = StarLightEngine.getFilledEmptyLight(world);
+        this.skyNibbles = StarLightEngine.getFilledEmptyLight(world);
+        // Paper end
+        this.level = level;
+        // Paper end
         this.chunkPos = pos;
         this.upgradeData = upgradeData;
         this.blockTicks = blockTickScheduler;
@@ -90,16 +172,32 @@
         this.postProcessing = new ShortList[world.getSectionsCount()];
     }
 
+    // Paper start - If loaded util
+    @Override
+    public FluidState getFluidIfLoaded(BlockPos blockposition) {
+        return this.getFluidState(blockposition);
+    }
+
+    @Override
+    public BlockState getTypeIfLoaded(BlockPos blockposition) {
+        return this.getBlockState(blockposition);
+    }
+    // Paper end
+
     @Override
     public BlockState getBlockState(BlockPos pos) {
-        int i = pos.getY();
-        if (this.isOutsideBuildHeight(i)) {
+        // Paper start
+        return getType(pos.getX(), pos.getY(), pos.getZ());
+    }
+    public BlockState getType(final int x, final int y, final int z) {
+        if (this.isOutsideBuildHeight(y)) {
             return Blocks.VOID_AIR.defaultBlockState();
         } else {
-            LevelChunkSection levelChunkSection = this.getSections()[this.getSectionIndex(i)];
-            return LevelChunkSection.isEmpty(levelChunkSection) ? Blocks.AIR.defaultBlockState() : levelChunkSection.getBlockState(pos.getX() & 15, i & 15, pos.getZ() & 15);
+            LevelChunkSection chunksection = this.getSections()[this.getSectionIndex(y)];
+            return chunksection == LevelChunk.EMPTY_SECTION || chunksection.isEmpty() ? Blocks.AIR.defaultBlockState() : chunksection.getBlockState(x & 15, y & 15, z & 15);
         }
     }
+    // Paper end
 
     @Override
     public FluidState getFluidState(BlockPos pos) {
@@ -152,7 +250,7 @@
 
                 LevelChunkSection levelChunkSection = this.getOrCreateSection(l);
                 BlockState blockState = levelChunkSection.setBlockState(i & 15, j & 15, k & 15, state);
-                if (this.status.isOrAfter(ChunkStatus.FEATURES) && state != blockState && (state.getLightBlock(this, pos) != blockState.getLightBlock(this, pos) || state.getLightEmission() != blockState.getLightEmission() || state.useShapeForLightOcclusion() || blockState.useShapeForLightOcclusion())) {
+                if (this.status.isOrAfter(ChunkStatus.LIGHT) && state != blockState && (state.getLightBlock(this, pos) != blockState.getLightBlock(this, pos) || state.getLightEmission() != blockState.getLightEmission() || state.useShapeForLightOcclusion() || blockState.useShapeForLightOcclusion())) { // Paper - move block updates to only happen after lighting occurs (or during, thanks chunk system)
                     this.lightEngine.checkBlock(pos);
                 }
 
