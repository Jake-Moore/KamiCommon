--- a/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -29,6 +29,49 @@
         return GameEventDispatcher.NOOP;
     }
 
+    default void setLastSaved(long ticks) {}
+    // Paper start
+    default boolean generateFlatBedrock() {
+        if (this.getLevel() != null) {
+            return this.getLevel().paperConfig.generateFlatBedrock;
+        }
+        return false;
+    }
+
+    net.minecraft.world.level.Level getLevel();
+    // Paper end
+
+    // Paper start
+    default ca.spottedleaf.starlight.light.SWMRNibbleArray[] getBlockNibbles() {
+        throw new UnsupportedOperationException(this.getClass().getName());
+    }
+    default void setBlockNibbles(ca.spottedleaf.starlight.light.SWMRNibbleArray[] nibbles) {
+        throw new UnsupportedOperationException(this.getClass().getName());
+    }
+
+    default ca.spottedleaf.starlight.light.SWMRNibbleArray[] getSkyNibbles() {
+        throw new UnsupportedOperationException(this.getClass().getName());
+    }
+    default void setSkyNibbles(ca.spottedleaf.starlight.light.SWMRNibbleArray[] nibbles) {
+        throw new UnsupportedOperationException(this.getClass().getName());
+    }
+    public default boolean[] getSkyEmptinessMap() {
+        throw new UnsupportedOperationException(this.getClass().getName());
+    }
+    public default void setSkyEmptinessMap(final boolean[] emptinessMap) {
+        throw new UnsupportedOperationException(this.getClass().getName());
+    }
+
+    public default boolean[] getBlockEmptinessMap() {
+        throw new UnsupportedOperationException(this.getClass().getName());
+    }
+
+    public default void setBlockEmptinessMap(final boolean[] emptinessMap) {
+        throw new UnsupportedOperationException(this.getClass().getName());
+    }
+    // Paper end
+
+    BlockState getType(final int x, final int y, final int z); // Paper
     @Nullable
     BlockState setBlockState(BlockPos pos, BlockState state, boolean moved);
 
@@ -62,7 +105,7 @@
     default LevelChunkSection getOrCreateSection(int yIndex) {
         LevelChunkSection[] levelChunkSections = this.getSections();
         if (levelChunkSections[yIndex] == LevelChunk.EMPTY_SECTION) {
-            levelChunkSections[yIndex] = new LevelChunkSection(this.getSectionYFromSectionIndex(yIndex));
+            levelChunkSections[yIndex] = new LevelChunkSection(this.getSectionYFromSectionIndex(yIndex), this, this.getLevel(), true); // Paper - Anti-Xray - Add parameters
         }
 
         return levelChunkSections[yIndex];
