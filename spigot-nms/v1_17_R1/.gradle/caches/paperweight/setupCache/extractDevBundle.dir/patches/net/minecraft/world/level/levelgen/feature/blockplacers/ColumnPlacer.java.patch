--- a/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java
+++ b/net/minecraft/world/level/levelgen/feature/blockplacers/ColumnPlacer.java
@@ -10,11 +10,28 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 public class ColumnPlacer extends BlockPlacer {
+    // Paper start
     public static final Codec<ColumnPlacer> CODEC = RecordCodecBuilder.create((instance) -> {
-        return instance.group(IntProvider.NON_NEGATIVE_CODEC.fieldOf("size").forGetter((columnPlacer) -> {
-            return columnPlacer.size;
-        })).apply(instance, ColumnPlacer::new);
+        return instance.group(
+            IntProvider.NON_NEGATIVE_CODEC.optionalFieldOf("size").forGetter((columnPlacer) -> {
+                return java.util.Optional.of(columnPlacer.size);
+            }),
+            Codec.INT.optionalFieldOf("min_size").forGetter((columnPlacer) -> {
+                return java.util.Optional.empty();
+            }),
+            Codec.INT.optionalFieldOf("extra_size").forGetter((columnPlacer) -> {
+                return java.util.Optional.empty();
+            })
+        ).apply(instance, ColumnPlacer::new);
     });
+    public ColumnPlacer(java.util.Optional<IntProvider> size, java.util.Optional<Integer> minSize, java.util.Optional<Integer> extraSize) {
+        if (size.isPresent()) {
+            this.size = size.get();
+        } else {
+            this.size = net.minecraft.util.valueproviders.BiasedToBottomInt.of(minSize.get().intValue(), minSize.get().intValue() + extraSize.get().intValue());
+        }
+    }
+    // Paper end
     private final IntProvider size;
 
     public ColumnPlacer(IntProvider size) {
