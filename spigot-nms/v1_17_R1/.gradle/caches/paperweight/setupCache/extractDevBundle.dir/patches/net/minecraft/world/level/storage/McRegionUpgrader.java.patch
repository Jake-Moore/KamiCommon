--- a/net/minecraft/world/level/storage/McRegionUpgrader.java
+++ b/net/minecraft/world/level/storage/McRegionUpgrader.java
@@ -35,13 +35,29 @@
     private static final String MCREGION_EXTENSION = ".mcr";
 
     static boolean convertLevel(LevelStorageSource.LevelStorageAccess storageSession, ProgressListener progressListener) {
+        // Paper start
+        progressListener = new ProgressListener() {
+            @Override
+            public void progressStartNoAbort(net.minecraft.network.chat.Component title) {}
+            @Override
+            public void progressStart(net.minecraft.network.chat.Component title) {}
+            @Override
+            public void progressStage(net.minecraft.network.chat.Component task) {}
+            @Override
+            public void progressStagePercentage(int percentage) {}
+            @Override
+            public void stop() {}
+        };
+        // Paper end
         progressListener.progressStagePercentage(0);
         List<File> list = Lists.newArrayList();
         List<File> list2 = Lists.newArrayList();
         List<File> list3 = Lists.newArrayList();
-        File file = storageSession.getDimensionPath(Level.OVERWORLD);
-        File file2 = storageSession.getDimensionPath(Level.NETHER);
-        File file3 = storageSession.getDimensionPath(Level.END);
+        // Paper start
+        File file = storageSession.getDimensionPathForLegacyConversion(Level.OVERWORLD);
+        File file2 = storageSession.getDimensionPathForLegacyConversion(Level.NETHER);
+        File file3 = storageSession.getDimensionPathForLegacyConversion(Level.END);
+        // Paper end
         LOGGER.info("Scanning folders...");
         addRegionFiles(file, list);
         if (file2.exists()) {
@@ -88,14 +104,58 @@
     }
 
     private static void convertRegions(RegistryAccess.RegistryHolder registryManager, File directory, Iterable<File> files, BiomeSource biomeSource, int i, int j, ProgressListener progressListener) {
-        for(File file : files) {
-            convertRegion(registryManager, directory, file, biomeSource, i, j, progressListener);
-            ++i;
-            int k = (int)Math.round(100.0D * (double)i / (double)j);
-            progressListener.progressStagePercentage(k);
+        // Paper start - thread this because it's dead simple
+        convertRegionsThreaded(registryManager, directory, files, biomeSource, i, j, progressListener);
+    }
+
+    private static void convertRegionsThreaded(RegistryAccess.RegistryHolder registryManager, File directory, Iterable<File> files, BiomeSource biomeSource, int progress, int total, ProgressListener progressListener) {
+        if (!files.iterator().hasNext()) {
+            return;
+        }
+
+        final int threads = Runtime.getRuntime().availableProcessors() / 2;
+        final java.util.concurrent.ExecutorService threadPool = java.util.concurrent.Executors.newFixedThreadPool(Math.max(1, threads), new java.util.concurrent.ThreadFactory() {
+            private final java.util.concurrent.atomic.AtomicInteger threadCounter = new java.util.concurrent.atomic.AtomicInteger();
+
+            @Override
+            public Thread newThread(final Runnable run) {
+                final Thread ret = new Thread(run);
+
+                ret.setName("World upgrader thread for directory " + directory + " #" + this.threadCounter.getAndIncrement());
+                ret.setUncaughtExceptionHandler((thread, throwable) -> {
+                    LOGGER.fatal("Error upgrading world", throwable);
+                });
+
+                return ret;
+            }
+        });
+        final java.util.concurrent.atomic.AtomicInteger converted = new java.util.concurrent.atomic.AtomicInteger(progress);
+
+        final long start = System.nanoTime();
+
+        for (final File file : files) {
+            threadPool.execute(() -> {
+                convertRegion(registryManager, directory, file, biomeSource, 0, total, progressListener);
+                converted.incrementAndGet();
+            });
         }
+        threadPool.shutdown();
 
+        final java.text.DecimalFormat format = new java.text.DecimalFormat("#0.00");
+        while (!threadPool.isTerminated()) {
+            final int getConverted = converted.get();
+            LOGGER.info("Converting... {}/{} ({}%)", getConverted, total, format.format(100.0D * (double) getConverted / (double) total));
+            try {
+                Thread.sleep(1000L);
+            } catch (final InterruptedException ignored) {}
+        }
+
+        final long end = System.nanoTime();
+
+        final double durationSeconds = Math.ceil((end - start) * 1.0e-9);
+        LOGGER.info("Conversion for {} completed in {}s", directory, durationSeconds);
     }
+    // Paper end
 
     private static void convertRegion(RegistryAccess.RegistryHolder registryManager, File directory, File file, BiomeSource biomeSource, int i, int j, ProgressListener progressListener) {
         String string = file.getName();
