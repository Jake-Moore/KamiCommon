--- a/net/minecraft/util/thread/StrictQueue.java
+++ b/net/minecraft/util/thread/StrictQueue.java
@@ -22,9 +22,12 @@
         private final List<Queue<Runnable>> queueList;
 
         public FixedPriorityQueue(int priorityCount) {
-            this.queueList = IntStream.range(0, priorityCount).mapToObj((i) -> {
-                return Queues.newConcurrentLinkedQueue();
-            }).collect(Collectors.toList());
+            // Paper start - remove streams
+            this.queueList = new java.util.ArrayList<>(priorityCount); // queues
+            for (int j = 0; j < priorityCount; ++j) {
+                this.queueList.add(Queues.newConcurrentLinkedQueue());
+            }
+            // Paper end - remove streams
         }
 
         @Nullable
@@ -49,7 +52,16 @@
 
         @Override
         public boolean isEmpty() {
-            return this.queueList.stream().allMatch(Collection::isEmpty);
+            // Paper start - remove streams
+            // why are we doing streams every time we might want to execute a task?
+            for (int i = 0, len = this.queueList.size(); i < len; ++i) {
+                Queue<Runnable> queue = this.queueList.get(i);
+                if (!queue.isEmpty()) {
+                    return false;
+                }
+            }
+            return true;
+            // Paper end - remove streams
         }
 
         @Override
