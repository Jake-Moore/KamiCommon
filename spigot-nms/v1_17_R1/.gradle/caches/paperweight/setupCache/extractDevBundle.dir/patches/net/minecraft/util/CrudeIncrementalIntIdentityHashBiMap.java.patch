--- a/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
+++ b/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
@@ -16,12 +16,14 @@
     private K[] byId;
     private int nextId;
     private int size;
+    private java.util.BitSet usedIds; // Paper
 
     public CrudeIncrementalIntIdentityHashBiMap(int size) {
         size = (int)((float)size / 0.8F);
         this.keys = (K[])(new Object[size]);
         this.values = new int[size];
         this.byId = (K[])(new Object[size]);
+        this.usedIds = new java.util.BitSet(); // Paper
     }
 
     @Override
@@ -54,9 +56,13 @@
     }
 
     private int nextId() {
+        /* // Paper start
         while(this.nextId < this.byId.length && this.byId[this.nextId] != null) {
             ++this.nextId;
         }
+        */
+        this.nextId = this.usedIds.nextClearBit(0);
+        // Paper end
 
         return this.nextId;
     }
@@ -69,6 +75,7 @@
         this.byId = (K[])(new Object[newSize]);
         this.nextId = 0;
         this.size = 0;
+        this.usedIds.clear(); // Paper
 
         for(int i = 0; i < objects.length; ++i) {
             if (objects[i] != null) {
@@ -92,6 +99,7 @@
         this.keys[k] = value;
         this.values[k] = id;
         this.byId[id] = value;
+        this.usedIds.set(id); // Paper
         ++this.size;
         if (id == this.nextId) {
             ++this.nextId;
@@ -153,6 +161,7 @@
         Arrays.fill(this.byId, (Object)null);
         this.nextId = 0;
         this.size = 0;
+        this.usedIds.clear(); // Paper
     }
 
     public int size() {
