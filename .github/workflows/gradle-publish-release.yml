name: Maven Deploy & Release

on:
  push:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write # Access to Publish a Release
      packages: write # Access to Publish a Package

    #--------------------------------------------------------------------------------------------
    #           Build the Artifact and Publish to Luxious Repository
    #--------------------------------------------------------------------------------------------
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        gradle-version: '8.7'

    - name: Extract Version from Gradle
      id: extract_version
      run: |
        gradle clean
        version=$(gradle properties -q | grep "^version:" | awk '{print $2}')
        echo "version=$version" >> $GITHUB_OUTPUT

    # Step to validate and display the version
    # We use SemVer to store if the version is a release, otherwise we won't deploy
    - name: Validate Version
      id: validate_version
      run: |
        echo "Version: ${{ steps.extract_version.outputs.version }}"
        if [[ "${{ steps.extract_version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
          echo "Version is a release"
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "Version is not a release (skipping deployment)"
        fi

    - name: Build with Gradle 8.7
      if: steps.validate_version.outputs.is_release == 'true'
      run: gradle publish
      env:
        LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
        LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}

    #--------------------------------------------------------------------------------------------
    #           Create a Github Release
    #--------------------------------------------------------------------------------------------

    - name: Create Release (Spigot Jar + Module Jars)
      if: steps.validate_version.outputs.is_release == 'true'
      uses: ncipollo/release-action@v1
      with:
        # We only want to add the spigot-jar file, since that is the only fully-shaded and runnable jar
        # All other modules publish api dependencies via their publication, and are meaningless on their own
        # Those jars should be pulled with a build system, from the luxiouslabs maven repository, such that
        #  all their dependencies can be fetched as well.
        artifacts: "spigot-jar/build/libs/*.jar"
        allowUpdates: true
        removeArtifacts: true
        omitBodyDuringUpdate: true
        omitDraftDuringUpdate: true
        omitNameDuringUpdate: true
        omitPrereleaseDuringUpdate: true
        tag: "${{ steps.extract_version.outputs.version }}"

    # Update the README.md Badge with the new version
    - name: Create Version Badge
      if: steps.validate_version.outputs.is_release == 'true'
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 5dfd7c9bb8b81ae5867c81e9a77ee821
        filename: test.json # Use test.svg if you want to use the SVG mode.
        label: Latest Release
        message: "${{ steps.extract_version.outputs.version }}"
        color: blue

    - name: Update Download Link Gist
      if: steps.validate_version.outputs.is_release == 'true'
      env:
        GIST_ID: 5dfd7c9bb8b81ae5867c81e9a77ee821
        AUTH_KEY: ${{ secrets.GIST_SECRET }}
        VERSION: ${{ steps.extract_version.outputs.version }}
      run: |
        CONTENT="https://github.com/Jake-Moore/KamiCommon/releases/download/$VERSION/kamicommon-$VERSION.jar"
        curl -X PATCH \
          -H "Authorization: token $AUTH_KEY" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/gists/$GIST_ID \
          -d "{\"files\": {\"kamicommon.txt\": {\"content\": \"$CONTENT\"}}}"
