name: Gradle Publish & Release

on:
  push:
    # Run on 'main' (for releases) and on 'release/v5' (for pre-releases)
    branches: [ "main", "release/v5" ]

jobs:
  # -------------------------------------------------- #
  #                  Build Validation                  #
  # -------------------------------------------------- #
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      oldestServerAPI: ${{ steps.extract_api_versions.outputs.oldestServerAPI }}
      newestServerAPI: ${{ steps.extract_api_versions.outputs.newestServerAPI }}
      is_valid: ${{ steps.validate_version.outputs.is_valid }}
      is_release: ${{ steps.validate_version.outputs.is_release }}
      is_prerelease: ${{ steps.validate_version.outputs.is_prerelease }}
      is_snapshot: ${{ steps.validate_version.outputs.is_snapshot }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      # Configure: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@748248ddd2a24f49513d8f472f81c3a07d4d50e1 # v4.4.4
        with:
          gradle-version: '9.0.0'

      - name: Build with Gradle (1.8.8)
        run: gradle build
        env:
          LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
          LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}
          MC_SERVER_NEWEST_API: "false"

      - name: Build with Gradle (Latest Paper 1.21+)
        run: gradle build
        env:
          LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
          LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}
          MC_SERVER_NEWEST_API: "true"

      - name: Extract Version from Gradle
        id: extract_version
        run: |
          gradle clean
          version=$(gradle properties -q | grep "^version:" | awk '{print $2}')
          echo "version=$version" >> $GITHUB_OUTPUT

      # Step to validate and display the version
      # We use SemVer to store if the version is a release, otherwise we won't deploy
      - name: Validate Version
        id: validate_version
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          echo "Version: $VERSION"
          
          # Regex patterns
          SEMVER_RELEASE='^[0-9]+\.[0-9]+\.[0-9]+$'
          SEMVER_PRERELEASE='^[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta|rc)\.[0-9]+$'
          SEMVER_SNAPSHOT='^.+-SNAPSHOT$'
          
          # Default values
          echo "is_valid=false" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "is_snapshot=false" >> $GITHUB_OUTPUT
          
          if [[ "$VERSION" =~ $SEMVER_RELEASE ]]; then
            echo "is_valid=true" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "Version is a RELEASE"
          elif [[ "$VERSION" =~ $SEMVER_PRERELEASE ]]; then
            echo "is_valid=true" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "Version is a PRE-RELEASE"
          elif [[ "$VERSION" =~ $SEMVER_SNAPSHOT ]]; then
            echo "is_valid=true" >> $GITHUB_OUTPUT
            echo "is_snapshot=true" >> $GITHUB_OUTPUT
            echo "Version is a SNAPSHOT"
          else
            echo "❌ Invalid version format, skipping deployment"
          fi

      - name: Extract API Versions from Gradle
        id: extract_api_versions
        run: |
          gradle clean
          oldestServerAPI=$(gradle printOldestServerAPI-short -q | tr -d '[:space:]')
          newestServerAPI=$(gradle printNewestServerAPI-short -q | tr -d '[:space:]')
          echo "oldestServerAPI=$oldestServerAPI" >> $GITHUB_OUTPUT
          echo "newestServerAPI=$newestServerAPI" >> $GITHUB_OUTPUT

  #--------------------------------------------------------------------------#
  #                          Release Job (main branch)                       #
  #--------------------------------------------------------------------------#
  release:
    needs: setup
    # Run only for commits into main, with valid versions that match the release pattern
    if: github.ref == 'refs/heads/main' && needs.setup.outputs.is_valid == 'true' && needs.setup.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Access to Publish a Release
      packages: write # Access to Publish a Package

    steps:
    - uses: actions/checkout@v5

    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@748248ddd2a24f49513d8f472f81c3a07d4d50e1 # v4.4.4
      with:
        gradle-version: '9.0.0'

    - name: Publish Release with Gradle
      run: gradle publish
      env:
        LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
        LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}

    - name: Define Release Download URLs
      id: generate_url
      run: |
        VERSION="${{ needs.setup.outputs.version }}"
        REPO_URL="https://repo.luxiouslabs.net/repository/maven-releases/com/kamikazejam/kamicommon/"
  
        STANDALONE_UTILS_URL="$REPO_URL/standalone-utils/$VERSION/standalone-utils-$VERSION.jar"
        echo "standalone_utils_url=$STANDALONE_UTILS_URL" >> $GITHUB_OUTPUT
        
        STANDALONE_JAR_URL="$REPO_URL/standalone-jar/$VERSION/standalone-jar-$VERSION.jar"
        echo "standalone_jar_url=$STANDALONE_JAR_URL" >> $GITHUB_OUTPUT
        
        SHARED_UTILS_URL="$REPO_URL/shared-utils/$VERSION/shared-utils-$VERSION.jar"
        echo "shared_utils_url=$SHARED_UTILS_URL" >> $GITHUB_OUTPUT
        
        SHARED_JAR_URL="$REPO_URL/shared-jar/$VERSION/shared-jar-$VERSION.jar"
        echo "shared_jar_url=$SHARED_JAR_URL" >> $GITHUB_OUTPUT
        
        SPIGOT_UTILS_URL="$REPO_URL/spigot-utils/$VERSION/spigot-utils-$VERSION.jar"
        echo "spigot_utils_url=$SPIGOT_UTILS_URL" >> $GITHUB_OUTPUT
        
        SPIGOT_JAR_URL="$REPO_URL/spigot-jar/$VERSION/spigot-jar-$VERSION.jar"
        echo "spigot_jar_url=$SPIGOT_JAR_URL" >> $GITHUB_OUTPUT
        
        PLUGIN_JAR_URL="https://github.com/Jake-Moore/KamiCommon/releases/download/$VERSION/KamiCommon-$VERSION.jar"
        echo "plugin_jar_url=$PLUGIN_JAR_URL" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        # We only want to add the spigot-jar file, since that is the only fully-shaded and runnable jar
        # All other modules publish api dependencies via their publication, and are meaningless on their own
        # Those jars should be pulled with a build system, from the luxiouslabs maven repository, such that
        #  all their dependencies can be fetched as well.
        artifacts: "spigot-jar/build/libs/*.jar"
        allowUpdates: true
        removeArtifacts: true
        omitBodyDuringUpdate: true
        omitDraftDuringUpdate: true
        omitNameDuringUpdate: true
        omitPrereleaseDuringUpdate: true
        body: |
          ## KamiCommon Release ${{ needs.build-core.outputs.core_version }}
          
          ### Plugin Download
          - [KamiCommon Plugin](${{ steps.generate_url.outputs.plugin_jar_url }})
          
          ### Published Artifacts
          - [standalone-utils](${{ steps.generate_url.outputs.standalone_utils_url }})
          - [standalone-jar](${{ steps.generate_url.outputs.standalone_jar_url }})
          - [shared-utils](${{ steps.generate_url.outputs.shared_utils_url }})
          - [shared-jar](${{ steps.generate_url.outputs.shared_jar_url }})
          - [spigot-utils](${{ steps.generate_url.outputs.spigot_utils_url }})
          - [spigot-jar](${{ steps.generate_url.outputs.spigot_jar_url }})
          ```
        tag: "${{ needs.setup.outputs.version }}"
        name: "KamiCommon ${{ needs.setup.outputs.version }}"

    # Update the README.md Badge with the new version
    - name: Create Version Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 5dfd7c9bb8b81ae5867c81e9a77ee821
        filename: kc-release-latest.json
        label: Latest Release
        message: "${{ needs.setup.outputs.version }}"
        color: blue

    # Update the README.md API Compatibility Badge with the new version
    - name: Create API Compatibility Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 5dfd7c9bb8b81ae5867c81e9a77ee821
        filename: kc-release-compatibility.json
        label: Latest Release
        message: "${{ needs.setup.outputs.oldestServerAPI }} - ${{ needs.setup.outputs.newestServerAPI }}"
        color: blue

    - name: Update Download Link Gist
      env:
        GIST_ID: 5dfd7c9bb8b81ae5867c81e9a77ee821
        AUTH_KEY: ${{ secrets.GIST_SECRET }}
        VERSION: ${{ needs.setup.outputs.version }}
      run: |
        CONTENT="https://github.com/Jake-Moore/KamiCommon/releases/download/$VERSION/kamicommon-$VERSION.jar"
        curl -X PATCH \
          -H "Authorization: token $AUTH_KEY" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/gists/$GIST_ID \
          -d "{\"files\": {\"kamicommon.txt\": {\"content\": \"$CONTENT\"}}}"

  #--------------------------------------------------------------------------#
  #                      Pre-release Job (release/v5 branch)                #
  #--------------------------------------------------------------------------#
  prerelease:
    needs: setup
    # Run only for commits into dev branch, with valid versions that match the prerelease pattern
    if: github.ref == 'refs/heads/release/v5' && needs.setup.outputs.is_valid == 'true' && needs.setup.outputs.is_prerelease == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Access to Publish a Release
      packages: write # Access to Publish a Package

    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@748248ddd2a24f49513d8f472f81c3a07d4d50e1 # v4.4.4
        with:
          gradle-version: '9.0.0'

      - name: Publish Pre-Release with Gradle
        run: gradle publish
        env:
          LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
          LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}

      - name: Create GitHub Pre-Release
        uses: ncipollo/release-action@v1
        with:
          # We only want to add the spigot-jar file, since that is the only fully-shaded and runnable jar
          # All other modules publish api dependencies via their publication, and are meaningless on their own
          # Those jars should be pulled with a build system, from the luxiouslabs maven repository, such that
          #  all their dependencies can be fetched as well.
          artifacts: "spigot-jar/build/libs/*.jar"
          allowUpdates: true
          removeArtifacts: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          # Mark as a prerelease
          prerelease: true
          body: |
            ## KamiCommon Pre-Release ${{ needs.build-core.outputs.core_version }}
            
            ⚠️ **This is a pre-release version for testing purposes.**
            
            Maven Artifacts are available via the [LuxiousLabs Maven Repository](https://repo.luxiouslabs.net/).
            - Pre-Releases are published in the `maven-releases` repository.
          tag: "pre-v${{ needs.setup.outputs.version }}"
          name: "KamiCommon ${{ needs.setup.outputs.version }} (Pre-Release)"

      # Update the README.md Badge with the new version
      - name: Create Version Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 5dfd7c9bb8b81ae5867c81e9a77ee821
          filename: kc-prerelease-latest.json
          label: Latest Pre-Release
          message: "${{ needs.setup.outputs.version }}"
          color: orange

      # Update the README.md API Compatibility Badge with the new version
      - name: Create API Compatibility Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 5dfd7c9bb8b81ae5867c81e9a77ee821
          filename: kc-prerelease-compatibility.json
          label: Latest Release
          message: "${{ needs.setup.outputs.oldestServerAPI }} - ${{ needs.setup.outputs.newestServerAPI }}"
          color: orange

      # We skip updating the download link, the download link only updates for stable releases

  #--------------------------------------------------------------------------#
  #                    Javadocs Job (release & pre-release)                  #
  #--------------------------------------------------------------------------#
  docs:
    needs: setup
    # Run only for commits with valid versions that match the release OR prerelease pattern on their respective branches
    if: needs.setup.outputs.is_valid == 'true' && ((github.ref == 'refs/heads/main' && needs.setup.outputs.is_release == 'true') || (github.ref == 'refs/heads/release/v5' && needs.setup.outputs.is_prerelease == 'true'))

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@748248ddd2a24f49513d8f472f81c3a07d4d50e1 # v4.4.4
        with:
          gradle-version: '9.0.0'

      - name: Display Version
        run: echo "Version is ${{ needs.setup.outputs.version }}"

      - name: Generate Javadocs
        run: gradle aggregateJavadoc

      - name: Checkout gh-pages
        uses: actions/checkout@v5
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy versioned docs
        run: |
          VERSION="${{ needs.setup.outputs.version }}"
          echo "Deploying docs for version: $VERSION"

          cd gh-pages
          
          # Define modules
          MODULES=(
            "standalone-utils"
            "standalone-jar"
            "shared-utils"
            "shared-jar"
            "spigot-utils"
            "spigot-jar"
          )
          
          for MODULE in "${MODULES[@]}"; do
            echo "Processing module: $MODULE"
          
            SRC_DIR="../$MODULE/build/docs/aggregateJavadoc"
            if [ ! -d "$SRC_DIR" ]; then
              echo "Warning: Docs not found for $MODULE at $SRC_DIR. Skipping."
              continue
            fi
          
            # Create module dir and version subdir
            MODULE_DIR="$MODULE"
            VERSION_DIR="$MODULE_DIR/$VERSION"
          
            # Remove any existing version folder for idempotency
            rm -rf "$VERSION_DIR"
            mkdir -p "$VERSION_DIR"
          
            # Copy docs
            cp -r "$SRC_DIR/"* "$VERSION_DIR/"
          
            # Update 'latest' for this module
            rm -rf "$MODULE_DIR/latest"
            cp -r "$VERSION_DIR" "$MODULE_DIR/latest"
          
            echo "Created $VERSION_DIR"
            echo "Updated $MODULE_DIR/latest to point to $VERSION"
          done
          
          echo "Docs deploy complete."

      - name: Generate versions.json (per module)
        run: |
          set -euo pipefail
          VERSION="${{ needs.setup.outputs.version }}"
          cd gh-pages

          MODULES=(
            "standalone-utils"
            "standalone-jar"
            "shared-utils"
            "shared-jar"
            "spigot-utils"
            "spigot-jar"
          )

          for MODULE in "${MODULES[@]}"; do
            echo "Generating versions.json for module: $MODULE"

            # Skip if module dir doesn't exist yet (e.g., no docs published yet)
            if [ ! -d "$MODULE" ]; then
              echo "  Skipping: $MODULE directory not found."
              continue
            fi

            pushd "$MODULE" >/dev/null

            # Find version directories in this module (exclude latest and files)
            # Match semantic versions like 1.2.3 and tags starting with v like v1.2.3
            VERSIONS=$(find . -maxdepth 1 -mindepth 1 -type d \
              \( -name "*.*.*" -o -name "v*" \) \
              | sed 's|./||' \
              | grep -v '^latest$' \
              | sort -V -r || true)

            echo "  Found versions: ${VERSIONS:-<none>}"

            # If no versions found, clear any existing versions.json and continue
            if [ -z "${VERSIONS}" ]; then
              echo '{ "versions": [], "latest": "" }' > versions.json
              echo "  Wrote empty versions.json for $MODULE"
              popd >/dev/null
              continue
            fi

            # Write versions.json
            {
              echo "{"
              echo '  "versions": ['
              first=true
              for v in $VERSIONS; do
                if [ "$first" = true ]; then
                  first=false
                else
                  echo ","
                fi
                printf '    "%s"' "$v"
              done
              echo
              echo "  ],"
              printf '  "latest": "%s"\n' "$VERSION"
              echo "}"
            } > versions.json

            echo "  Generated versions.json for $MODULE:"
            cat versions.json

            popd >/dev/null
          done

      - name: Generate module index.html files
        run: |
          cd gh-pages

          MODULES=(
            "standalone-utils"
            "standalone-jar" 
            "shared-utils"
            "shared-jar"
            "spigot-utils"
            "spigot-jar"
          )

          # Download the HTML template once
          curl -s https://raw.githubusercontent.com/Jake-Moore/Jake-Moore.github.io/refs/heads/main/templates/index-template.html -o template.html

          for MODULE in "${MODULES[@]}"; do
            echo "Generating index.html for module: $MODULE"

            # Skip if module dir doesn't exist
            if [ ! -d "$MODULE" ]; then
              echo "  Skipping: $MODULE directory not found."
              continue
            fi

            pushd "$MODULE" >/dev/null

            # Create the dynamic content section
            cat > dynamic_content.html << 'EOF'
          <h2>📚 Latest Version</h2>
          <a href="latest/" class="version-link latest">Latest (Recommended)</a>

          <h2>📋 All Versions</h2>
          <div id="versions" class="loading">Loading available versions...</div>

          <script>
          // Load versions
          fetch("versions.json")
              .then(response => {
                  if (!response.ok) throw new Error("Failed to load versions");
                  return response.json();
              })
              .then(data => {
                  const container = document.getElementById("versions");
                  container.innerHTML = "";
                  container.classList.remove("loading");

                  if (data.versions && data.versions.length > 0) {
                      data.versions.forEach(version => {
                          const link = document.createElement("a");
                          link.href = version + "/";
                          link.textContent = `Version ${version}`;
                          link.className = "version-link";
                          container.appendChild(link);
                      });
                  } else {
                      container.innerHTML = "<p>No versions available yet.</p>";
                  }
              })
              .catch(error => {
                  console.error("Error loading versions:", error);
                  document.getElementById("versions").innerHTML = 
                      "<p style=\"color: #dc3545;\">Error loading versions. Please refresh the page.</p>";
              });
          </script>
          EOF

            # Replace placeholders in the template with module-specific content
            sed "s|{{PAGE_TITLE}}|KamiCommon ${MODULE} Javadocs|g" ../template.html | \
            sed "s|{{PAGE_HEADING}}|🚀 KamiCommon ${MODULE} Javadocs|g" | \
            sed "s|{{PAGE_DESCRIPTION}}|Welcome to the KamiCommon ${MODULE} documentation. Choose a version below to browse its Javadocs.|g" | \
            sed "s|{{GITHUB_PATH}}|/Jake-Moore/KamiCommon|g" > temp_index.html

            # Replace the dynamic content placeholder
            awk '
            /{{DYNAMIC_CONTENT}}/ {
                while ((getline line < "dynamic_content.html") > 0) {
                    print line
                }
                close("dynamic_content.html")
                next
            }
            { print }
            ' temp_index.html > index.html

            # Clean up module-specific files
            rm temp_index.html dynamic_content.html

            echo "  Generated index.html for $MODULE"
            popd >/dev/null
          done

          # Clean up shared template
          rm template.html

      - name: Generate primary index.html
        run: |
          cd gh-pages
          
          # Download the HTML template
          curl -s https://raw.githubusercontent.com/Jake-Moore/Jake-Moore.github.io/refs/heads/main/templates/index-template.html -o template.html
          
          # Create the dynamic content section with module cards
          cat > dynamic_content.html << 'EOF'
          <h2>📦 Available Modules</h2>
          <div class="modules-grid">
              <a href="spigot-jar/" class="module-card">
                  <h3>🎮 spigot-jar</h3>
                  <p>Spigot plugin JAR components</p>
              </a>
          
              <a href="spigot-utils/" class="module-card">
                  <h3>⚡ spigot-utils</h3>
                  <p>Spigot-specific utility classes</p>
              </a>
          
              <a href="standalone-jar/" class="module-card">
                  <h3>📦 standalone-jar</h3>
                  <p>Packaged JAR for standalone applications</p>
              </a>
          
              <a href="standalone-utils/" class="module-card">
                  <h3>🔧 standalone-utils</h3>
                  <p>Utility classes for standalone applications</p>
              </a>
          
              <a href="shared-jar/" class="module-card">
                  <h3>📚 shared-jar</h3>
                  <p>Shared JAR components</p>
              </a>
          
              <a href="shared-utils/" class="module-card">
                  <h3>🤝 shared-utils</h3>
                  <p>Shared utility classes across platforms</p>
              </a>
          </div>
          
          <style>
          .modules-grid {
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
              gap: 1.5rem;
              margin: 2rem 0;
          }
          
          .module-card {
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
              border: none;
              border-radius: 12px;
              padding: 1.5rem;
              text-decoration: none;
              color: white;
              transition: all 0.3s ease;
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          }
          
          .module-card:hover {
              transform: translateY(-2px);
              box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
              color: white;
              text-decoration: none;
          }
          
          .module-card h3 {
              margin: 0 0 0.5rem 0;
              font-size: 1.2rem;
          }
          
          .module-card p {
              margin: 0;
              opacity: 0.9;
              font-size: 0.9rem;
          }
          </style>
          EOF
          
          # Replace placeholders in the template
          sed "s|{{PAGE_TITLE}}|KamiCommon Javadocs|g" template.html | \
          sed "s|{{PAGE_HEADING}}|🚀 KamiCommon Javadocs|g" | \
          sed "s|{{PAGE_DESCRIPTION}}|Welcome to the KamiCommon documentation. Select a module below to browse its documentation.|g" | \
          sed "s|{{GITHUB_PATH}}|/Jake-Moore/KamiCommon|g" > temp_index.html
          
          # Replace the dynamic content placeholder
          awk '
          /{{DYNAMIC_CONTENT}}/ {
              while ((getline line < "dynamic_content.html") > 0) {
                  print line
              }
              close("dynamic_content.html")
              next
          }
          { print }
          ' temp_index.html > index.html
          
          # Clean up
          rm template.html temp_index.html dynamic_content.html
          
          echo "Generated primary index.html"

      - name: Commit and push
        run: |
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📚 Deploy docs for v${{ needs.setup.outputs.version }} - $(date)"
            git push
            echo "✅ Documentation deployed successfully!"
          fi