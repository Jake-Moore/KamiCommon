name: Maven Deploy & Release

on:
  push:
    # Run on 'main' (for releases) and on 'release/v5' (for pre-releases)
    branches: [ "main", "release/v5" ]

jobs:
  # -------------------------------------------------- #
  #                  Shared Setup Job                  #
  # -------------------------------------------------- #
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      is_valid: ${{ steps.validate_version.outputs.is_valid }}
      is_release: ${{ steps.validate_version.outputs.is_release }}
      is_prerelease: ${{ steps.validate_version.outputs.is_prerelease }}
      is_snapshot: ${{ steps.validate_version.outputs.is_snapshot }}

    steps:
    - uses: actions/checkout@v5

    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    # Configure: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2
      with:
        gradle-version: '9.0.0'

    - name: Extract Version from Gradle
      id: extract_version
      run: |
        gradle clean
        version=$(gradle properties -q | grep "^version:" | awk '{print $2}')
        echo "version=$version" >> $GITHUB_OUTPUT

    # Step to validate and display the version
    # We use SemVer to store if the version is a release, otherwise we won't deploy
    - name: Validate Version
      id: validate_version
      run: |
        VERSION="${{ steps.extract_version.outputs.version }}"
        echo "Version: $VERSION"

        # Regex patterns
        SEMVER_RELEASE='^[0-9]+\.[0-9]+\.[0-9]+$'
        SEMVER_PRERELEASE='^[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta|rc)\.[0-9]+$'
        SEMVER_SNAPSHOT='^.+-SNAPSHOT$'

        # Default values
        echo "is_valid=false" >> $GITHUB_OUTPUT
        echo "is_release=false" >> $GITHUB_OUTPUT
        echo "is_prerelease=false" >> $GITHUB_OUTPUT
        echo "is_snapshot=false" >> $GITHUB_OUTPUT

        if [[ "$VERSION" =~ $SEMVER_RELEASE ]]; then
          echo "is_valid=true" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
          echo "Version is a RELEASE"
        elif [[ "$VERSION" =~ $SEMVER_PRERELEASE ]]; then
          echo "is_valid=true" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "Version is a PRE-RELEASE"
        elif [[ "$VERSION" =~ $SEMVER_SNAPSHOT ]]; then
          echo "is_valid=true" >> $GITHUB_OUTPUT
          echo "is_snapshot=true" >> $GITHUB_OUTPUT
          echo "Version is a SNAPSHOT"
        else
          echo "❌ Invalid version format, skipping deployment"
        fi

  #--------------------------------------------------------------------------#
  #                          Release Job (main branch)                       #
  #--------------------------------------------------------------------------#
  release:
    needs: setup
    # Run only for commits into main, with valid versions that match the release pattern
    if: github.ref == 'refs/heads/main' && needs.setup.outputs.is_valid == 'true' && needs.setup.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Access to Publish a Release
      packages: write # Access to Publish a Package

    steps:
    - uses: actions/checkout@v5

    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2
      with:
        gradle-version: '9.0.0'

    - name: Publish Release with Gradle
      run: gradle publish
      env:
        LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
        LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}

    - name: Define Release Download URLs
      id: generate_url
      run: |
        VERSION="${{ needs.setup.outputs.version }}"
        REPO_URL="https://repo.luxiouslabs.net/repository/maven-releases/com/kamikazejam/kamicommon/"
  
        STANDALONE_UTILS_URL="$REPO_URL/standalone-utils/$VERSION/standalone-utils-$VERSION.jar"
        echo "standalone_utils_url=$STANDALONE_UTILS_URL" >> $GITHUB_OUTPUT
        
        STANDALONE_JAR_URL="$REPO_URL/standalone-jar/$VERSION/standalone-jar-$VERSION.jar"
        echo "standalone_jar_url=$STANDALONE_JAR_URL" >> $GITHUB_OUTPUT
        
        SHARED_UTILS_URL="$REPO_URL/shared-utils/$VERSION/shared-utils-$VERSION.jar"
        echo "shared_utils_url=$SHARED_UTILS_URL" >> $GITHUB_OUTPUT
        
        SHARED_JAR_URL="$REPO_URL/shared-jar/$VERSION/shared-jar-$VERSION.jar"
        echo "shared_jar_url=$SHARED_JAR_URL" >> $GITHUB_OUTPUT
        
        SPIGOT_UTILS_URL="$REPO_URL/spigot-utils/$VERSION/spigot-utils-$VERSION.jar"
        echo "spigot_utils_url=$SPIGOT_UTILS_URL" >> $GITHUB_OUTPUT
        
        SPIGOT_JAR_URL="$REPO_URL/spigot-jar/$VERSION/spigot-jar-$VERSION.jar"
        echo "spigot_jar_url=$SPIGOT_JAR_URL" >> $GITHUB_OUTPUT
        
        PLUGIN_JAR_URL="https://github.com/Jake-Moore/KamiCommon/releases/download/$VERSION/KamiCommon-$VERSION.jar"
        echo "plugin_jar_url=$PLUGIN_JAR_URL" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        # We only want to add the spigot-jar file, since that is the only fully-shaded and runnable jar
        # All other modules publish api dependencies via their publication, and are meaningless on their own
        # Those jars should be pulled with a build system, from the luxiouslabs maven repository, such that
        #  all their dependencies can be fetched as well.
        artifacts: "spigot-jar/build/libs/*.jar"
        allowUpdates: true
        removeArtifacts: true
        omitBodyDuringUpdate: true
        omitDraftDuringUpdate: true
        omitNameDuringUpdate: true
        omitPrereleaseDuringUpdate: true
        body: |
          ## KamiCommon Release ${{ needs.build-core.outputs.core_version }}
          
          ### Plugin Download
          - [KamiCommon Plugin](${{ steps.generate_url.outputs.plugin_jar_url }})
          
          ### Published Artifacts
          - [standalone-utils](${{ steps.generate_url.outputs.standalone_utils_url }})
          - [standalone-jar](${{ steps.generate_url.outputs.standalone_jar_url }})
          - [shared-utils](${{ steps.generate_url.outputs.shared_utils_url }})
          - [shared-jar](${{ steps.generate_url.outputs.shared_jar_url }})
          - [spigot-utils](${{ steps.generate_url.outputs.spigot_utils_url }})
          - [spigot-jar](${{ steps.generate_url.outputs.spigot_jar_url }})
          ```
        tag: "${{ needs.setup.outputs.version }}"
        name: "KamiCommon ${{ needs.setup.outputs.version }}"

    # Update the README.md Badge with the new version
    - name: Create Version Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 5dfd7c9bb8b81ae5867c81e9a77ee821
        filename: kc-release-latest.json
        label: Latest Release
        message: "${{ needs.setup.outputs.version }}"
        color: blue

    - name: Update Download Link Gist
      env:
        GIST_ID: 5dfd7c9bb8b81ae5867c81e9a77ee821
        AUTH_KEY: ${{ secrets.GIST_SECRET }}
        VERSION: ${{ needs.setup.outputs.version }}
      run: |
        CONTENT="https://github.com/Jake-Moore/KamiCommon/releases/download/$VERSION/kamicommon-$VERSION.jar"
        curl -X PATCH \
          -H "Authorization: token $AUTH_KEY" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/gists/$GIST_ID \
          -d "{\"files\": {\"kamicommon.txt\": {\"content\": \"$CONTENT\"}}}"

  #--------------------------------------------------------------------------#
  #                      Pre-release Job (release/v5 branch)                #
  #--------------------------------------------------------------------------#
  prerelease:
    needs: setup
    # Run only for commits into dev branch, with valid versions that match the prerelease pattern
    if: github.ref == 'refs/heads/release/v5' && needs.setup.outputs.is_valid == 'true' && needs.setup.outputs.is_prerelease == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Access to Publish a Release
      packages: write # Access to Publish a Package

    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2
        with:
          gradle-version: '9.0.0'

      - name: Publish Pre-Release with Gradle
        run: gradle publish
        env:
          LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
          LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}

      - name: Create GitHub Pre-Release
        uses: ncipollo/release-action@v1
        with:
          # We only want to add the spigot-jar file, since that is the only fully-shaded and runnable jar
          # All other modules publish api dependencies via their publication, and are meaningless on their own
          # Those jars should be pulled with a build system, from the luxiouslabs maven repository, such that
          #  all their dependencies can be fetched as well.
          artifacts: "spigot-jar/build/libs/*.jar"
          allowUpdates: true
          removeArtifacts: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          # Mark as a prerelease
          prerelease: true
          body: |
            ## KamiCommon Pre-Release ${{ needs.build-core.outputs.core_version }}
            
            ⚠️ **This is a pre-release version for testing purposes.**
            ```
          tag: "pre-v${{ needs.setup.outputs.version }}"
          name: "KamiCommon ${{ needs.setup.outputs.version }} (Pre-Release)"

      # Update the README.md Badge with the new version
      - name: Create Version Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 5dfd7c9bb8b81ae5867c81e9a77ee821
          filename: kc-prerelease-latest.json
          label: Latest Pre-Release
          message: "${{ needs.setup.outputs.version }}"
          color: blue

      # We skip updating the download link, the download link only updates for stable releases